
Input:
baababbbbabaababaa babbabaababaabbaabaa
baaababbbbaa aababaabaaaabbaabaa
bbababbbbbbaaabbbb bbbababbbaaaaaa
aabaabbbabbaaaaba aabaababaaababababab
babababaaaaababaab bbbabbaababb
babbbabbabb abbaabaaab
abaaabbbbbababbaabb bbbbbaaabbb
baaaaaababbbbbbaaaa aababbbbbabaaaab
abaaabaabbaa aaabbbaaaabb
bbaabbabaaabbbbb aaabbbbbbbbb
bbbabbbababbba baaabbaaabb
baaaaaaaab bbababbbaba
aaabaaabaabbaba bbbaabbbabbabbab

Your output:
7 2 11 2 0 5 0 1 8
Correct output:
7 2 11
2 0 5
0 1 8
0 0 6
10 6 5
5 0 4
1 4 7
5 0 9
2 0 4
8 0 8
9 3 3
0 1 2
7 2 5

 (Time used: 0.03/15.00, memory used: 11022336/536870912.)

 # python 3

## TODO - optimize

import random
import fileinput
import sys

m1 = 10000007

def binarySearchPattern(pattern, text, _prime1, _prime2, _multiplier):
    pattern_length = len(pattern)
    text_length = len(text)

    left = 0
    right = min(pattern_length, text_length)

    result = None
    longest_substring_result = [(0,1,0)]
    while left <= right:
        mid = left + (right - left)//2
        result = getSubstring(text, pattern, mid, _prime1, _prime2, _multiplier)
        #print("      mid, output = ", mid, result)
        if result[0][2] != 0:
            left = mid +1
        else:
            right = mid -1

        ## Keep track of the longest common substring
        if result[0][2] > longest_substring_result[0][2]:
            longest_substring_result = result

    return longest_substring_result

def hashFunction(pattern, _prime, _multiplier):
    hash_value = 0
    for s in reversed(pattern):
        hash_value = ( (hash_value * _multiplier)%_prime + (ord(s)) %_prime ) % _prime
        #print("hash value and m1",hash_value, m1)
    return hash_value % _prime

def preComputedHashes(text, n, _prime, _multiplier):
    pattern_length = n
    text_length = len(text)
    hashes = [None] * (text_length - pattern_length + 1)
    last_string = text[text_length - pattern_length:text_length]
    hashes[text_length - pattern_length] = hashFunction(last_string, _prime, _multiplier)

    y = 1
    for i in range(pattern_length):
        y = (y * _multiplier) % _prime

    for i in range(text_length-pattern_length-1, -1, -1):
        hashes[i] = (((hashes[i+1] * _multiplier)%_prime + (ord(text[i]))%_prime - (y * ord(text[i+pattern_length])) % _prime) % _prime) % _prime
    #print("hashes ", hashes)
    return hashes


def getSubstring(text, pattern, n, _prime1, _prime2, _multiplier):
    result = []
    pattern_hash_value_1 = preComputedHashes(pattern, n, _prime1, _multiplier)
    pattern_hash_value_2 = preComputedHashes(pattern, n, _prime2, _multiplier)

    text_hash_value_1 = preComputedHashes(text, n, _prime1, _multiplier)
    text_hash_value_2 = preComputedHashes(text, n, _prime2, _multiplier)

    hash_of_pattern_hash_1 = [None] * 1000000000
    #hash_of_pattern_hash_2 = [None] * 1000000
    for i in range(len(pattern_hash_value_1)):
        hash_of_pattern_hash_1[pattern_hash_value_1[i]] = i
        hash_of_pattern_hash_1[pattern_hash_value_2[i]] = i


    for j in range(len(text_hash_value_1)):
        if hash_of_pattern_hash_1[text_hash_value_1[j]] != None and hash_of_pattern_hash_1[text_hash_value_2[j]] != None:
            result.append((hash_of_pattern_hash_1[text_hash_value_1[j]],j,n))
            return result

    # for i in range(len(pattern_hash_value_1)):
    #     for j in range(len(text_hash_value_1)):
    #         if text_hash_value_1[j] == pattern_hash_value_1[i] and text_hash_value_2[j] == pattern_hash_value_2[i]:
    #             #if text[i:i+n] == pattern[j:j+n]:
    #             result.append((i,j,n))
    #             #print("Matching text, pattern  = ", text[i:i+n], text, pattern[j:j+n], pattern )
    #             #print (pattern_hash_value_1, text_hash_value_1)
    #             #print(pattern_hash_value_2, text_hash_value_2)
    #             return result

    #print("No matching")
    result.append((0,1,0))
    return result



# if __name__ == '__main__':
#     #_input = sys.stdin.read()
    result = []
for line in fileinput.input():
    if line != '\n':
        pattern, text = line.split()
        _prime1 = 1000000039
        _prime2 = 1000000061
        _multiplier = random.randint(1, _prime1-7)
        result = binarySearchPattern(pattern, text, _prime1, _prime2, _multiplier)
        for i in result[0]:
            print(i, end = " ")
        print("\n")
